# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401
from enum import Enum  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_codegen.models.base_model_ import Model  # noqa: F401
from swagger_codegen.models.child import Child  # noqa: F401,E501
from swagger_codegen import util  # noqa: F401


class Parent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, parent_field1: str=None, parent_field2: str=None, children: List[Child]=None):  # noqa: E501
        """Parent - a model defined in Swagger

        :param parent_field1: The parent_field1 of this Parent.  # noqa: E501
        :type parent_field1: str
        :param parent_field2: The parent_field2 of this Parent.  # noqa: E501
        :type parent_field2: str
        :param children: The children of this Parent.  # noqa: E501
        :type children: List[Child]
        """
        self.swagger_types = {
            'parent_field1': str,
            'parent_field2': str,
            'children': List[Child]
        }

        self.attribute_map = {
            'parent_field1': 'parent_field1',
            'parent_field2': 'parent_field2',
            'children': 'children'
        }

        self._parent_field1 = parent_field1
        self._parent_field2 = parent_field2
        self._children = children

    @classmethod
    def from_dict(cls, dikt) -> 'Parent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Parent of this Parent.  # noqa: E501
        :rtype: Parent
        """
        return util.deserialize_model(dikt, cls)

    def validate(self):
        errors = []
        if self._parent_field1 is None:
            errors.append({
                "code": "required",
                "field": "parent_field1",
                "message": "Invalid value for `parent_field1`, must not be `None`"  # noqa: E501
            })
        if self._parent_field1 is not None and len(self._parent_field1) < 1:
            errors.append({
                "code": "minLength",
                "field": "parent_field1",
                "message": "Invalid value for `parent_field1`, length must be greater than or equal to `1`"  # noqa: E501
            })
        if self._parent_field2 is not None and len(self._parent_field2) > 20:
            errors.append({
                "code": "maxLength",
                "field": "parent_field2",
                "message": "Invalid value for `parent_field2`, length must be less than or equal to `20`"  # noqa: E501
            })
        if self._children is None:
            errors.append({
                "code": "required",
                "field": "children",
                "message": "Invalid value for `children`, must not be `None`"  # noqa: E501
            })
        # TODO List[] のチェック処理を追加

        for attr, attr_type in self.swagger_types.items():
            # List[xxx] の場合
            if type(List) == type(attr_type):
                attr_values = getattr(self, attr)
                if not attr_values:
                    continue
                for i, attr_value in enumerate(attr_values):  # pylint: disable=E1133
                    attr_errors = attr_value.validate()
                    for attr_error in attr_errors:
                        attr_error["field"] = "{parent_attr}[{index}]{child_attr}".format(
                            parent_attr=attr, index=i, child_attr=attr_error["field"])
                    errors.extend(attr_errors)

            # Model のサブクラスの場合
            elif issubclass(attr_type, Model):
                attr_value = getattr(self, attr)
                if not attr_value:
                    continue
                attr_errors = attr_value.validate()
                for attr_error in attr_errors:
                    attr_error["field"] = "{parent_attr}.{child_attr}".format(
                        parent_attr=attr, child_attr=attr_error["field"])
                errors.extend(attr_errors)
        return errors

    @property
    def parent_field1(self) -> str:
        """Gets the parent_field1 of this Parent.


        :return: The parent_field1 of this Parent.
        :rtype: str
        """
        return self._parent_field1

    @parent_field1.setter
    def parent_field1(self, parent_field1: str):
        """Sets the parent_field1 of this Parent.


        :param parent_field1: The parent_field1 of this Parent.
        :type parent_field1: str
        """
        self._parent_field1 = parent_field1

    @property
    def parent_field2(self) -> str:
        """Gets the parent_field2 of this Parent.


        :return: The parent_field2 of this Parent.
        :rtype: str
        """
        return self._parent_field2

    @parent_field2.setter
    def parent_field2(self, parent_field2: str):
        """Sets the parent_field2 of this Parent.


        :param parent_field2: The parent_field2 of this Parent.
        :type parent_field2: str
        """
        self._parent_field2 = parent_field2

    @property
    def children(self) -> List[Child]:
        """Gets the children of this Parent.


        :return: The children of this Parent.
        :rtype: List[Child]
        """
        return self._children

    @children.setter
    def children(self, children: List[Child]):
        """Sets the children of this Parent.


        :param children: The children of this Parent.
        :type children: List[Child]
        """
        self._children = children
