# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401
from enum import Enum  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_codegen.models.base_model_ import Model  # noqa: F401
from swagger_codegen.models.child import Child  # noqa: F401,E501
from swagger_codegen import util  # noqa: F401


class Parent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, parent_field1: str=None, parent_field2: str=None, children: List[Child]=None, string_array: List[str]=None, integer_array: List[int]=None, float_array: List[float]=None, boolean_array: List[bool]=None, datetime_array: List[datetime]=None):  # noqa: E501
        """Parent - a model defined in Swagger

        :param parent_field1: The parent_field1 of this Parent.  # noqa: E501
        :type parent_field1: str
        :param parent_field2: The parent_field2 of this Parent.  # noqa: E501
        :type parent_field2: str
        :param children: The children of this Parent.  # noqa: E501
        :type children: List[Child]
        :param string_array: The string_array of this Parent.  # noqa: E501
        :type string_array: List[str]
        :param integer_array: The integer_array of this Parent.  # noqa: E501
        :type integer_array: List[int]
        :param float_array: The float_array of this Parent.  # noqa: E501
        :type float_array: List[float]
        :param boolean_array: The boolean_array of this Parent.  # noqa: E501
        :type boolean_array: List[bool]
        :param datetime_array: The datetime_array of this Parent.  # noqa: E501
        :type datetime_array: List[datetime]
        """
        self.swagger_types = {
            'parent_field1': str,
            'parent_field2': str,
            'children': List[Child],
            'string_array': List[str],
            'integer_array': List[int],
            'float_array': List[float],
            'boolean_array': List[bool],
            'datetime_array': List[datetime]
        }

        self.attribute_map = {
            'parent_field1': 'parent_field1',
            'parent_field2': 'parent_field2',
            'children': 'children',
            'string_array': 'StringArray',
            'integer_array': 'IntegerArray',
            'float_array': 'FloatArray',
            'boolean_array': 'BooleanArray',
            'datetime_array': 'DatetimeArray'
        }

        self._parent_field1 = parent_field1
        self._parent_field2 = parent_field2
        self._children = children
        self._string_array = string_array
        self._integer_array = integer_array
        self._float_array = float_array
        self._boolean_array = boolean_array
        self._datetime_array = datetime_array

    @classmethod
    def from_dict(cls, dikt) -> 'Parent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Parent of this Parent.  # noqa: E501
        :rtype: Parent
        """
        return util.deserialize_model(dikt, cls)

    def validate(self):
        errors = []
        if self._parent_field1 is None:
            errors.append({
                "code": "required",
                "field": "parent_field1",
                "message": "Invalid value for `parent_field1`, must not be `None`"  # noqa: E501
            })
        if self._parent_field1 is not None and len(self._parent_field1) < 1:
            errors.append({
                "code": "minLength",
                "field": "parent_field1",
                "message": "Invalid value for `parent_field1`, length must be greater than or equal to `1`"  # noqa: E501
            })
        if self._parent_field2 is not None and len(self._parent_field2) > 20:
            errors.append({
                "code": "maxLength",
                "field": "parent_field2",
                "message": "Invalid value for `parent_field2`, length must be less than or equal to `20`"  # noqa: E501
            })
        if self._children is None:
            errors.append({
                "code": "required",
                "field": "children",
                "message": "Invalid value for `children`, must not be `None`"  # noqa: E501
            })
        # TODO List[object] のチェック処理を追加
        if self._children is not None and type(self._children) != list:
            errors.append({
                "code": "type_list",
                "field": "children",
                "message": "Invalid value for `children`, must not be type `list`"  # noqa: E501
            })
        if self._children is not None and type(self._children) == list:
            for i, attr_value in enumerate(self._children):  # pylint: disable=E1133
                attr_errors = attr_value.validate()
                for attr_error in attr_errors:
                    attr_error["field"] = "{parent_attr}[{index}]{child_attr}".format(
                        parent_attr="children", index=i, child_attr=attr_error["field"])
                errors.extend(attr_errors)
        # TODO List[str], List[int], List[float], List[bool], List[datetime] のチェック処理を追加
        # TODO List[str], List[int], List[float], List[bool], List[datetime] のチェック処理を追加
        # TODO List[str], List[int], List[float], List[bool], List[datetime] のチェック処理を追加
        # TODO List[str], List[int], List[float], List[bool], List[datetime] のチェック処理を追加
        # TODO List[str], List[int], List[float], List[bool], List[datetime] のチェック処理を追加

        return errors

    @property
    def parent_field1(self) -> str:
        """Gets the parent_field1 of this Parent.


        :return: The parent_field1 of this Parent.
        :rtype: str
        """
        return self._parent_field1

    @parent_field1.setter
    def parent_field1(self, parent_field1: str):
        """Sets the parent_field1 of this Parent.


        :param parent_field1: The parent_field1 of this Parent.
        :type parent_field1: str
        """
        self._parent_field1 = parent_field1

    @property
    def parent_field2(self) -> str:
        """Gets the parent_field2 of this Parent.


        :return: The parent_field2 of this Parent.
        :rtype: str
        """
        return self._parent_field2

    @parent_field2.setter
    def parent_field2(self, parent_field2: str):
        """Sets the parent_field2 of this Parent.


        :param parent_field2: The parent_field2 of this Parent.
        :type parent_field2: str
        """
        self._parent_field2 = parent_field2

    @property
    def children(self) -> List[Child]:
        """Gets the children of this Parent.


        :return: The children of this Parent.
        :rtype: List[Child]
        """
        return self._children

    @children.setter
    def children(self, children: List[Child]):
        """Sets the children of this Parent.


        :param children: The children of this Parent.
        :type children: List[Child]
        """
        self._children = children

    @property
    def string_array(self) -> List[str]:
        """Gets the string_array of this Parent.


        :return: The string_array of this Parent.
        :rtype: List[str]
        """
        return self._string_array

    @string_array.setter
    def string_array(self, string_array: List[str]):
        """Sets the string_array of this Parent.


        :param string_array: The string_array of this Parent.
        :type string_array: List[str]
        """
        self._string_array = string_array

    @property
    def integer_array(self) -> List[int]:
        """Gets the integer_array of this Parent.


        :return: The integer_array of this Parent.
        :rtype: List[int]
        """
        return self._integer_array

    @integer_array.setter
    def integer_array(self, integer_array: List[int]):
        """Sets the integer_array of this Parent.


        :param integer_array: The integer_array of this Parent.
        :type integer_array: List[int]
        """
        self._integer_array = integer_array

    @property
    def float_array(self) -> List[float]:
        """Gets the float_array of this Parent.


        :return: The float_array of this Parent.
        :rtype: List[float]
        """
        return self._float_array

    @float_array.setter
    def float_array(self, float_array: List[float]):
        """Sets the float_array of this Parent.


        :param float_array: The float_array of this Parent.
        :type float_array: List[float]
        """
        self._float_array = float_array

    @property
    def boolean_array(self) -> List[bool]:
        """Gets the boolean_array of this Parent.


        :return: The boolean_array of this Parent.
        :rtype: List[bool]
        """
        return self._boolean_array

    @boolean_array.setter
    def boolean_array(self, boolean_array: List[bool]):
        """Sets the boolean_array of this Parent.


        :param boolean_array: The boolean_array of this Parent.
        :type boolean_array: List[bool]
        """
        self._boolean_array = boolean_array

    @property
    def datetime_array(self) -> List[datetime]:
        """Gets the datetime_array of this Parent.


        :return: The datetime_array of this Parent.
        :rtype: List[datetime]
        """
        return self._datetime_array

    @datetime_array.setter
    def datetime_array(self, datetime_array: List[datetime]):
        """Sets the datetime_array of this Parent.


        :param datetime_array: The datetime_array of this Parent.
        :type datetime_array: List[datetime]
        """
        self._datetime_array = datetime_array
