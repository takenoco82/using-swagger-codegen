# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401
from enum import Enum  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_codegen.models.base_model_ import Model  # noqa: F401
from swagger_codegen.models.grandchild import Grandchild  # noqa: F401,E501
from swagger_codegen import util  # noqa: F401


class Child(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, child_field1: str=None, child_field2: str=None, grandchildren: List[Grandchild]=None):  # noqa: E501
        """Child - a model defined in Swagger

        :param child_field1: The child_field1 of this Child.  # noqa: E501
        :type child_field1: str
        :param child_field2: The child_field2 of this Child.  # noqa: E501
        :type child_field2: str
        :param grandchildren: The grandchildren of this Child.  # noqa: E501
        :type grandchildren: List[Grandchild]
        """
        self.swagger_types = {
            'child_field1': str,
            'child_field2': str,
            'grandchildren': List[Grandchild]
        }

        self.attribute_map = {
            'child_field1': 'child_field1',
            'child_field2': 'child_field2',
            'grandchildren': 'grandchildren'
        }

        self._child_field1 = child_field1
        self._child_field2 = child_field2
        self._grandchildren = grandchildren

    @classmethod
    def from_dict(cls, dikt) -> 'Child':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Child of this Child.  # noqa: E501
        :rtype: Child
        """
        return util.deserialize_model(dikt, cls)

    def validate(self):
        errors = []
        if self._child_field1 is None:
            errors.append({
                "code": "required",
                "field": "child_field1",
                "message": "Invalid value for `child_field1`, must not be `None`"  # noqa: E501
            })
        if self._child_field1 is not None and len(self._child_field1) < 1:
            errors.append({
                "code": "minLength",
                "field": "child_field1",
                "message": "Invalid value for `child_field1`, length must be greater than or equal to `1`"  # noqa: E501
            })
        if self._child_field2 is not None and len(self._child_field2) > 20:
            errors.append({
                "code": "maxLength",
                "field": "child_field2",
                "message": "Invalid value for `child_field2`, length must be less than or equal to `20`"  # noqa: E501
            })
        if self._grandchildren is None:
            errors.append({
                "code": "required",
                "field": "grandchildren",
                "message": "Invalid value for `grandchildren`, must not be `None`"  # noqa: E501
            })
        # TODO List[object] のチェック処理を追加

        for attr, attr_type in self.swagger_types.items():
            # List[xxx] の場合
            if type(List) == type(attr_type):
                attr_values = getattr(self, attr)
                if not attr_values:
                    continue
                for i, attr_value in enumerate(attr_values):  # pylint: disable=E1133
                    attr_errors = attr_value.validate()
                    for attr_error in attr_errors:
                        attr_error["field"] = "{parent_attr}[{index}]{child_attr}".format(
                            parent_attr=attr, index=i, child_attr=attr_error["field"])
                    errors.extend(attr_errors)

            # Model のサブクラスの場合
            elif issubclass(attr_type, Model):
                attr_value = getattr(self, attr)
                if not attr_value:
                    continue
                attr_errors = attr_value.validate()
                for attr_error in attr_errors:
                    attr_error["field"] = "{parent_attr}.{child_attr}".format(
                        parent_attr=attr, child_attr=attr_error["field"])
                errors.extend(attr_errors)
        return errors

    @property
    def child_field1(self) -> str:
        """Gets the child_field1 of this Child.


        :return: The child_field1 of this Child.
        :rtype: str
        """
        return self._child_field1

    @child_field1.setter
    def child_field1(self, child_field1: str):
        """Sets the child_field1 of this Child.


        :param child_field1: The child_field1 of this Child.
        :type child_field1: str
        """
        self._child_field1 = child_field1

    @property
    def child_field2(self) -> str:
        """Gets the child_field2 of this Child.


        :return: The child_field2 of this Child.
        :rtype: str
        """
        return self._child_field2

    @child_field2.setter
    def child_field2(self, child_field2: str):
        """Sets the child_field2 of this Child.


        :param child_field2: The child_field2 of this Child.
        :type child_field2: str
        """
        self._child_field2 = child_field2

    @property
    def grandchildren(self) -> List[Grandchild]:
        """Gets the grandchildren of this Child.


        :return: The grandchildren of this Child.
        :rtype: List[Grandchild]
        """
        return self._grandchildren

    @grandchildren.setter
    def grandchildren(self, grandchildren: List[Grandchild]):
        """Sets the grandchildren of this Child.


        :param grandchildren: The grandchildren of this Child.
        :type grandchildren: List[Grandchild]
        """
        self._grandchildren = grandchildren
