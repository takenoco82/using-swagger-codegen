# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401
from enum import Enum  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_codegen.models.base_model_ import Model  # noqa: F401
from swagger_codegen.models.error import Error  # noqa: F401,E501
from swagger_codegen import util  # noqa: F401


class Errors(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, errors: List[Error]=None):  # noqa: E501
        """Errors - a model defined in Swagger

        :param errors: The errors of this Errors.  # noqa: E501
        :type errors: List[Error]
        """
        self.swagger_types = {
            'errors': List[Error]
        }

        self.attribute_map = {
            'errors': 'errors'
        }

        self._errors = errors

    @classmethod
    def from_dict(cls, dikt) -> 'Errors':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Errors of this Errors.  # noqa: E501
        :rtype: Errors
        """
        return util.deserialize_model(dikt, cls)

    def validate(self):
        errors = []
        # TODO List[object] のチェック処理を追加
        if self._errors is not None and type(self._errors) != list:
            errors.append({
                "code": "type_list",
                "field": "errors",
                "message": "Invalid value for `errors`, must not be type `list`"  # noqa: E501
            })
        if self._errors is not None and type(self._errors) == list:
            for i, attr_value in enumerate(self._errors):  # pylint: disable=E1133
                attr_errors = attr_value.validate()
                for attr_error in attr_errors:
                    attr_error["field"] = "{parent_attr}[{index}]{child_attr}".format(
                        parent_attr="errors", index=i, child_attr=attr_error["field"])
                errors.extend(attr_errors)

        return errors

    @property
    def errors(self) -> List[Error]:
        """Gets the errors of this Errors.


        :return: The errors of this Errors.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors: List[Error]):
        """Sets the errors of this Errors.


        :param errors: The errors of this Errors.
        :type errors: List[Error]
        """
        self._errors = errors
