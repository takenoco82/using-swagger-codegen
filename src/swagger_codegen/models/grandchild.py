# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401
from enum import Enum  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_codegen.models.base_model_ import Model  # noqa: F401
from swagger_codegen import util  # noqa: F401


class Grandchild(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, grandchild_field1: str=None, grandchild_field2: str=None):  # noqa: E501
        """Grandchild - a model defined in Swagger

        :param grandchild_field1: The grandchild_field1 of this Grandchild.  # noqa: E501
        :type grandchild_field1: str
        :param grandchild_field2: The grandchild_field2 of this Grandchild.  # noqa: E501
        :type grandchild_field2: str
        """
        self.swagger_types = {
            'grandchild_field1': str,
            'grandchild_field2': str
        }

        self.attribute_map = {
            'grandchild_field1': 'grandchild_field1',
            'grandchild_field2': 'grandchild_field2'
        }

        self._grandchild_field1 = grandchild_field1
        self._grandchild_field2 = grandchild_field2

    @classmethod
    def from_dict(cls, dikt) -> 'Grandchild':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Grandchild of this Grandchild.  # noqa: E501
        :rtype: Grandchild
        """
        return util.deserialize_model(dikt, cls)

    def validate(self):
        errors = []
        if self._grandchild_field1 is None:
            errors.append({
                "code": "required",
                "field": "grandchild_field1",
                "message": "Invalid value for `grandchild_field1`, must not be `None`"  # noqa: E501
            })
        if self._grandchild_field1 is not None and len(self._grandchild_field1) < 1:
            errors.append({
                "code": "minLength",
                "field": "grandchild_field1",
                "message": "Invalid value for `grandchild_field1`, length must be greater than or equal to `1`"  # noqa: E501
            })
        if self._grandchild_field2 is not None and len(self._grandchild_field2) > 20:
            errors.append({
                "code": "maxLength",
                "field": "grandchild_field2",
                "message": "Invalid value for `grandchild_field2`, length must be less than or equal to `20`"  # noqa: E501
            })

        for attr, attr_type in self.swagger_types.items():
            # List[xxx] の場合
            if type(List) == type(attr_type):
                attr_values = getattr(self, attr)
                if not attr_values:
                    continue
                for i, attr_value in enumerate(attr_values):  # pylint: disable=E1133
                    attr_errors = attr_value.validate()
                    for attr_error in attr_errors:
                        attr_error["field"] = "{parent_attr}[{index}]{child_attr}".format(
                            parent_attr=attr, index=i, child_attr=attr_error["field"])
                    errors.extend(attr_errors)

            # Model のサブクラスの場合
            elif issubclass(attr_type, Model):
                attr_value = getattr(self, attr)
                if not attr_value:
                    continue
                attr_errors = attr_value.validate()
                for attr_error in attr_errors:
                    attr_error["field"] = "{parent_attr}.{child_attr}".format(
                        parent_attr=attr, child_attr=attr_error["field"])
                errors.extend(attr_errors)
        return errors

    @property
    def grandchild_field1(self) -> str:
        """Gets the grandchild_field1 of this Grandchild.


        :return: The grandchild_field1 of this Grandchild.
        :rtype: str
        """
        return self._grandchild_field1

    @grandchild_field1.setter
    def grandchild_field1(self, grandchild_field1: str):
        """Sets the grandchild_field1 of this Grandchild.


        :param grandchild_field1: The grandchild_field1 of this Grandchild.
        :type grandchild_field1: str
        """
        self._grandchild_field1 = grandchild_field1

    @property
    def grandchild_field2(self) -> str:
        """Gets the grandchild_field2 of this Grandchild.


        :return: The grandchild_field2 of this Grandchild.
        :rtype: str
        """
        return self._grandchild_field2

    @grandchild_field2.setter
    def grandchild_field2(self, grandchild_field2: str):
        """Sets the grandchild_field2 of this Grandchild.


        :param grandchild_field2: The grandchild_field2 of this Grandchild.
        :type grandchild_field2: str
        """
        self._grandchild_field2 = grandchild_field2
